---
import { ClientRouter } from "astro:transitions";
import { SITE } from "@/config";
import "@/styles/global.css";

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;

export interface Props {
  title?: string;
  author?: string;
  profile?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
}

const {
  title = SITE.title,
  author = SITE.author,
  profile = SITE.profile,
  description = SITE.desc,
  ogImage = SITE.ogImage ? `/${SITE.ogImage}` : "/og.png",
  canonicalURL = new URL(Astro.url.pathname, Astro.url),
  pubDatetime,
  modDatetime,
  scrollSmooth = false,
} = Astro.props;

const socialImageURL = new URL(ogImage, Astro.url);

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: `${title}`,
  image: `${socialImageURL}`,
  datePublished: `${pubDatetime?.toISOString()}`,
  ...(modDatetime && { dateModified: modDatetime.toISOString() }),
  author: [
    {
      "@type": "Person",
      name: `${author}`,
      ...(profile && { url: profile }),
    },
  ],
};
---

<!doctype html>
<html lang=`${SITE.lang ?? "en"}` class={`${scrollSmooth && "scroll-smooth"}`}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    <!-- Google JSON-LD Structured data -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify(structuredData)}
    />

    <!-- Enable RSS feed auto-discovery  -->
    <!-- https://docs.astro.build/en/recipes/rss/#enabling-rss-feed-auto-discovery -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title={SITE.title}
      href={new URL("rss.xml", Astro.site)}
    />

    <meta name="theme-color" content="" />

    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      googleSiteVerification && (
        <meta
          name="google-site-verification"
          content={googleSiteVerification}
        />
      )
    }

    <ClientRouter />

  </head>
  <body>
    <slot />
  </body>
</html>
<script>
import 'flowbite';
// 在你的全局脚本或布局的 <script> 中

// --- 确保 Flowbite 的初始化函数可用 ---
// 如果你是通过 CDN 或 <script> 标签引入的，
// Flowbite 的初始化函数通常会自动挂载到 window 对象上
// (可能名为 initFlowbite 或类似，请查阅你使用的 Flowbite 版本文档)
// 假设函数名为 initFlowbite()

function initializeFlowbiteComponents() {
  console.log("Initializing Flowbite components...");
  // 检查函数是否存在，避免错误
  if (typeof window.initFlowbite === 'function') {
    try {
      window.initFlowbite(); // 调用 Flowbite 提供的全局初始化函数
      console.log("Flowbite components initialized.");
    } catch (error) {
      console.error("Error initializing Flowbite:", error);
    }
  } else {
    console.warn("initFlowbite function not found. Make sure Flowbite JS is loaded correctly.");
    // 如果没有全局初始化函数，你可能需要手动查找并初始化
    // 这会更复杂，需要使用 Flowbite 提供的单个组件的构造函数
    // 例如:
    // document.querySelectorAll('[data-dropdown-toggle]').forEach(el => {
    //   const targetId = el.getAttribute('data-dropdown-toggle');
    //   const targetEl = document.getElementById(targetId);
    //   if (targetEl && !targetEl._flowbiteInstance) { // 简单检查是否已初始化
    //      try {
    //         const dropdown = new Dropdown(targetEl, el); // 假设有 Dropdown 类
    //         targetEl._flowbiteInstance = dropdown; // 标记
    //      } catch(e) { console.error("Error init dropdown", e); }
    //   }
    // });
    // 对 Modal, Collapse 等重复类似逻辑... (这通常不推荐，优先使用官方初始化函数)
  }
}

// --- 事件监听 ---



</script>
<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }
</style>
