--- 
// src/components/ColorWheel.astro
const colors = [
  { name: '红', fill: '#ef4444', angle: 0 }, // Red
  { name: '红橙', fill: '#f97316', angle: 30 }, // Red-Orange
  { name: '橙', fill: '#f59e0b', angle: 60 }, // Orange
  { name: '黄橙', fill: '#eab308', angle: 90 }, // Yellow-Orange
  { name: '黄', fill: '#facc15', angle: 120 }, // Yellow
  { name: '黄绿', fill: '#a3e635', angle: 150 }, // Yellow-Green
  { name: '绿', fill: '#22c55e', angle: 180 }, // Green
  { name: '蓝绿', fill: '#14b8a6', angle: 210 }, // Blue-Green
  { name: '蓝', fill: '#3b82f6', angle: 240 }, // Blue
  { name: '蓝紫', fill: '#6366f1', angle: 270 }, // Blue-Violet
  { name: '紫', fill: '#8b5cf6', angle: 300 }, // Violet
  { name: '红紫', fill: '#ec4899', angle: 330 }, // Red-Violet
];

const calculatePathData = (color: { angle: number }) => {
  const startAngle = color.angle;
  const endAngle = color.angle + 30; // Each segment is 30 degrees
  const radius = 80; // Outer radius
  const innerRadius = 20; // Inner radius for the center hole
  const cx = 100; // Center X
  const cy = 100; // Center Y

  const startRad = (startAngle - 90) * Math.PI / 180;
  const endRad = (endAngle - 90) * Math.PI / 180;

  const x1 = cx + radius * Math.cos(startRad);
  const y1 = cy + radius * Math.sin(startRad);
  const x2 = cx + radius * Math.cos(endRad);
  const y2 = cy + radius * Math.sin(endRad);

  const ix1 = cx + innerRadius * Math.cos(startRad);
  const iy1 = cy + innerRadius * Math.sin(startRad);
  const ix2 = cx + innerRadius * Math.cos(endRad);
  const iy2 = cy + innerRadius * Math.sin(endRad);

  const largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1";

  // M -> Move to outer start point
  // A -> Draw outer arc
  // L -> Line to inner end point
  // A -> Draw inner arc (reversed direction)
  // Z -> Close path
  const d = [
    `M ${x1} ${y1}`,
    `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`,
    `L ${ix2} ${iy2}`,
    `A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${ix1} ${iy1}`,
    "Z"
  ].join(" ");

  return d;
};

---

<div class="flex flex-row justify-center items-center my-8 gap-8">
  <div class="relative w-64 h-64 md:w-80 md:h-80">
    <svg viewBox="0 0 200 200" class="w-full h-full">
      {colors.map((color) => {
        const pathData = calculatePathData(color);
        // const { x: labelX, y: labelY } = calculateLabelPosition(color);

        return (
          <g>
            <path d={pathData} fill={color.fill} />
            {/* <text
              x={labelX}
              y={labelY}
              fill="currentColor"
              fontSize="10"
              textAnchor="middle"
              dominantBaseline="middle"
              class="dark:fill-gray-300 fill-gray-700"
            > */}
              {/* Text removed as requested */}
          </g>
        );
      })}
      {/* Center Circle - Radius reduced */}
      <circle cx="100" cy="100" r="10" fill="white" class="dark:fill-gray-800" />
    </svg>
  </div>
  {/* Legend */}
  <div class="p-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded shadow-md text-xs">
      <h4 class="font-semibold mb-1 text-center">图例</h4>
      <ul class="grid grid-cols-2 gap-x-4 gap-y-1">
        {colors.map(color => (
          <li class="flex items-center">
            <span class="inline-block w-3 h-3 rounded-full mr-2" style={`background-color: ${color.fill};`}></span>
            <span class="dark:text-gray-300 text-gray-700">{color.name}</span>
          </li>
        ))}
      </ul>
  </div>
</div>